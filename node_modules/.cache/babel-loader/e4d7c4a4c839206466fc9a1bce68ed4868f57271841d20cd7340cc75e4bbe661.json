{"ast":null,"code":"var _jsxFileName = \"/Users/nemanjapopovic/Desktop/mewed/src/MazeGame.js\",\n  _s = $RefreshSig$();\nimport { useSpring, animated, useInView } from '@react-spring/web';\nimport * as React from 'react';\nimport { Grid, Typography, Link } from \"@mui/material\";\nimport image1 from './images/image1.png';\nimport image2 from './images/image2.png';\nimport image4 from './images/image4.png';\nimport image5 from './images/image5.png';\nimport video1 from './videos/video1.gif';\nimport video2 from './videos/video2.gif';\nimport video3 from './videos/video3.gif';\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GifsData = [{\n  img: video1,\n  desc: ''\n}, {\n  img: video2,\n  desc: ''\n}, {\n  img: video3,\n  desc: ''\n}];\nconst itemData = [{\n  img: image1,\n  desc: 'This image shows the largest size maze as a 30x30'\n}, {\n  img: image2,\n  desc: 'The result of clicking \"Solve\" and having the computer find the solution'\n}, {\n  img: image4,\n  desc: 'The medium-sized maze at 20x20'\n}, {\n  img: image5,\n  desc: 'The second colour pallet option with a green and black colour pallet'\n}];\nfunction CustomTabPanel(props) {\n  const {\n    children,\n    value,\n    index,\n    ...other\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    role: \"tabpanel\",\n    hidden: value !== index,\n    id: `simple-tabpanel-${index}`,\n    \"aria-labelledby\": `simple-tab-${index}`,\n    ...other,\n    children: value === index && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        p: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 7\n  }, this);\n}\n_c = CustomTabPanel;\nCustomTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired\n};\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`\n  };\n}\nfunction MazeGame() {\n  _s();\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"MAZE GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Using the SDL library with C++ I was able to design and develop a maze game. This maze game allows you to regenerate a new maze with just a click of a button. There are 3 maze sizes to choose from, a 12x12, a 20x20, and a 30x30 maze size. In addition, you can change the color palette from a blue/white layout to a green/black one. Lastly, if you get stuck you can click the \\\"solve\\\" button and the computer will show you how to complete the maze! If you want to look at how the program looks like you can check out the screenshots and gifs below.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        href: \"https://github.com/TheRealJasoandRazi/Maze_Game\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Source Code Here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ScreenShots\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          borderBottom: 1,\n          borderColor: 'divider',\n          textAlign: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Tabs, {\n          value: value,\n          onChange: handleChange,\n          \"aria-label\": \"basic tabs example\",\n          sx: {\n            margin: 'auto'\n          },\n          children: itemData.map((item, index) => /*#__PURE__*/_jsxDEV(Tab, {\n            label: `Screenshot ${index + 1}`,\n            ...a11yProps(index),\n            sx: {\n              color: 'white'\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 3\n      }, this), itemData.map((item, index) => /*#__PURE__*/_jsxDEV(CustomTabPanel, {\n        value: value,\n        index: index,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.img,\n              alt: `Item ${index + 1}`,\n              style: {\n                width: '100%',\n                height: '100%',\n                objectFit: 'fill'\n              },\n              loading: \"lazy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                textAlign: 'center'\n              },\n              children: item.desc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(MazeGame, \"qPBOvRc2Co1iWTsdTL0g7j/rpjU=\");\n_c2 = MazeGame;\nexport default MazeGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"CustomTabPanel\");\n$RefreshReg$(_c2, \"MazeGame\");","map":{"version":3,"names":["useSpring","animated","useInView","React","Grid","Typography","Link","image1","image2","image4","image5","video1","video2","video3","PropTypes","Tabs","Tab","Box","jsxDEV","_jsxDEV","Fragment","_Fragment","GifsData","img","desc","itemData","CustomTabPanel","props","children","value","index","other","role","hidden","id","sx","p","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","number","isRequired","a11yProps","MazeGame","_s","setValue","useState","handleChange","event","newValue","style","textAlign","href","target","rel","width","borderBottom","borderColor","onChange","margin","map","item","label","color","container","spacing","xs","md","src","alt","height","objectFit","loading","_c2","$RefreshReg$"],"sources":["/Users/nemanjapopovic/Desktop/mewed/src/MazeGame.js"],"sourcesContent":["import { useSpring, animated, useInView } from '@react-spring/web';\nimport * as React from 'react';\nimport { Grid, Typography, Link } from \"@mui/material\";\nimport image1 from './images/image1.png';\nimport image2 from './images/image2.png';\nimport image4 from './images/image4.png';\nimport image5 from './images/image5.png';\nimport video1 from './videos/video1.gif';\nimport video2 from './videos/video2.gif';\nimport video3 from './videos/video3.gif';\n\nimport PropTypes from 'prop-types';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\n\nconst GifsData = [\n  {\n    img: video1,\n    desc: '',\n  },\n  {\n    img: video2,\n    desc: '',\n  },\n  {\n    img: video3,\n    desc: '',\n  }\n]\nconst itemData = [\n  {\n    img: image1,\n    desc: 'This image shows the largest size maze as a 30x30',\n  },\n  {\n    img: image2,\n    desc: 'The result of clicking \"Solve\" and having the computer find the solution',\n  },\n  {\n    img: image4,\n    desc: 'The medium-sized maze at 20x20',\n  },\n  {\n    img: image5,\n    desc: 'The second colour pallet option with a green and black colour pallet',\n  }];\n\n  function CustomTabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box sx={{ p: 3 }}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n  \n  CustomTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n  \n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\nfunction MazeGame() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return (\n    <>\n      <div style={{ textAlign: 'center' }}>\n        <h1>MAZE GAME</h1>\n        <Typography>\n          Using the SDL library with C++ I was able to design and develop a maze game. This maze game allows you to regenerate a new maze with just a click of a button. There are 3 maze sizes to choose from, a 12x12, a 20x20, and a 30x30 maze size. In addition, you can change the color palette from a blue/white layout to a green/black one. Lastly, if you get stuck you can click the \"solve\" button and the computer will show you how to complete the maze! If you want to look at how the program looks like you can check out the screenshots and gifs below.\n        </Typography>\n        <Link href=\"https://github.com/TheRealJasoandRazi/Maze_Game\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Source Code Here\n        </Link>\n        <h3>ScreenShots</h3>\n      </div>\n\n      <Box sx={{ width: '100%' }}>\n  <Box sx={{ borderBottom: 1, borderColor: 'divider', textAlign: 'center'}}>\n    <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\" sx={{ margin: 'auto' }}>\n      {itemData.map((item, index) => (\n        <Tab key={index} label={`Screenshot ${index+1}`} {...a11yProps(index)} sx={{color: 'white'}} />\n      ))}\n    </Tabs>\n  </Box>\n  \n  {itemData.map((item, index) => (\n    <CustomTabPanel key={index} value={value} index={index}>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={6}>\n          <img\n            src={item.img}\n            alt={`Item ${index + 1}`}\n            style={{\n              width: '100%',\n              height: '100%',\n              objectFit: 'fill',\n            }}\n            loading=\"lazy\"\n          />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Typography\n            sx={{textAlign: 'center'}}\n          >\n            {item.desc}</Typography>\n        </Grid>\n      </Grid>\n    </CustomTabPanel>\n  ))}\n  </Box>\n  </>\n  );\n}\n\nexport default MazeGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}