{"ast":null,"code":"var _jsxFileName = \"/Users/nemanjapopovic/Desktop/mywebsite/src/DevOps.js\";\nimport { AppBar, Divider, Icon, Toolbar } from '@mui/material';\nimport * as React from 'react';\nimport { Stack, IconButton, Box, TextField, ThemeProvider, MenuItem, Menu, Typography, Container, Popper, Paper, Fade, Grow, CardMedia } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DevOps() {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fixed: true,\n    sx: {\n      bgcolor: \"transparent\",\n      marginTop: '10vh',\n      marginBottom: '10vh',\n      textAlign: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        pt: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"My DevOps Pipeline\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 2,\n        sx: {\n          mb: \"10px\",\n          borderBottom: \"2px solid white\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Introduction:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Using the SDL library with C++ i was able to design and develop a maze game. This maze game allows you to regenerate a new maze with just a click of a button. There are 3 maze sizes to choose from, a 12x12 a 20x20 and a 30x30 maze size. In addition you change the colour pallet from a blue/white layout to a green/black one. Lastly, if you get stuck you can click the \\\"solve\\\" button and the computer will show you how to complete the maze! If you want to look at how the program looks like you can check out the screenshots and gifs below.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}\n_c = DevOps;\n;\nexport default DevOps;\nvar _c;\n$RefreshReg$(_c, \"DevOps\");","map":{"version":3,"names":["AppBar","Divider","Icon","Toolbar","React","Stack","IconButton","Box","TextField","ThemeProvider","MenuItem","Menu","Typography","Container","Popper","Paper","Fade","Grow","CardMedia","jsxDEV","_jsxDEV","DevOps","fixed","sx","bgcolor","marginTop","marginBottom","textAlign","children","pt","fileName","_jsxFileName","lineNumber","columnNumber","spacing","mb","borderBottom","variant","_c","$RefreshReg$"],"sources":["/Users/nemanjapopovic/Desktop/mywebsite/src/DevOps.js"],"sourcesContent":["import { AppBar, Divider, Icon, Toolbar } from '@mui/material';\nimport * as React from 'react';\nimport {\n    Stack,\n    IconButton,\n    Box,\n    TextField,\n    ThemeProvider,\n    MenuItem,\n    Menu,\n    Typography,\n    Container,\n    Popper,\n    Paper,\n    Fade,\n    Grow,\n    CardMedia,\n  } from \"@mui/material\";\n\nfunction DevOps() {\n    return (\n        <Container\n            fixed\n            sx={{\n            bgcolor: \"transparent\",\n            marginTop: '10vh',\n            marginBottom: '10vh',\n            textAlign: 'center',\n            }}\n        >\n            <Box sx={{ pt: \"10px\" }}>\n                <h1>My DevOps Pipeline</h1>\n                <Stack spacing={2} sx={{ mb: \"10px\", borderBottom: \"2px solid white\" }}>\n                    <Typography variant=\"h6\">Introduction:</Typography>\n                    <Typography>\n                        Using the SDL library with C++ i was able to design and develop a maze game. This maze game allows you to regenerate\n                        a new maze with just a click of a button. There are 3 maze sizes to choose from, a 12x12 a 20x20 and a 30x30 maze size.\n                        In addition you change the colour pallet from a blue/white layout to a green/black one. Lastly, if you get stuck you can \n                        click the \"solve\" button and the computer will show you how to complete the maze! If you want to look at how the program \n                        looks like you can check out the screenshots and gifs below.\n                    </Typography>\n                </Stack>\n            </Box>\n        </Container>\n    );\n};\nexport default DevOps;"],"mappings":";AAAA,SAASA,MAAM,EAAEC,OAAO,EAAEC,IAAI,EAAEC,OAAO,QAAQ,eAAe;AAC9D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SACIC,KAAK,EACLC,UAAU,EACVC,GAAG,EACHC,SAAS,EACTC,aAAa,EACbC,QAAQ,EACRC,IAAI,EACJC,UAAU,EACVC,SAAS,EACTC,MAAM,EACNC,KAAK,EACLC,IAAI,EACJC,IAAI,EACJC,SAAS,QACJ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,MAAMA,CAAA,EAAG;EACd,oBACID,OAAA,CAACP,SAAS;IACNS,KAAK;IACLC,EAAE,EAAE;MACJC,OAAO,EAAE,aAAa;MACtBC,SAAS,EAAE,MAAM;MACjBC,YAAY,EAAE,MAAM;MACpBC,SAAS,EAAE;IACX,CAAE;IAAAC,QAAA,eAEFR,OAAA,CAACb,GAAG;MAACgB,EAAE,EAAE;QAAEM,EAAE,EAAE;MAAO,CAAE;MAAAD,QAAA,gBACpBR,OAAA;QAAAQ,QAAA,EAAI;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3Bb,OAAA,CAACf,KAAK;QAAC6B,OAAO,EAAE,CAAE;QAACX,EAAE,EAAE;UAAEY,EAAE,EAAE,MAAM;UAAEC,YAAY,EAAE;QAAkB,CAAE;QAAAR,QAAA,gBACnER,OAAA,CAACR,UAAU;UAACyB,OAAO,EAAC,IAAI;UAAAT,QAAA,EAAC;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACnDb,OAAA,CAACR,UAAU;UAAAgB,QAAA,EAAC;QAMZ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEpB;AAACK,EAAA,GA1BQjB,MAAM;AA0Bd;AACD,eAAeA,MAAM;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}